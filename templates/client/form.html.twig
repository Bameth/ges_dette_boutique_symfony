{% extends 'base.html.twig' %}

{% block title %}Gestion des Clients{% endblock %}

{% block body %}
<div class="container mx-auto p-6">
    <div class="bg-gradient-to-br from-blue-500 to-purple-600 shadow-2xl rounded-lg p-8 max-w-lg mx-auto mt-10">
        <h1 class="text-4xl font-extrabold text-white text-center mb-6">Enregistrement d'un Client</h1>
        
        <form method="POST" action="{{ path('clients.store') }}">
            {{ form_start(formClient) }}
            
            <!-- Champs du formulaire client -->
            <div class="space-y-4">
                {{ form_widget(formClient, {'attr': {'class': 'border-b border-gray-300 py-2'}}) }}
            </div>

            <div class="mt-6 flex items-center justify-between">
                <span class="text-white font-semibold">Créer un utilisateur pour ce client</span>
                <label class="relative inline-flex items-center cursor-pointer">
                    <input type="checkbox" id="toggleUser" name="toggleUser" class="sr-only" 
                           {% if formUser.vars.errors|length > 0 or toggleUser is defined %}checked{% endif %}/>
                    <div class="toggle-bg bg-gray-200 w-14 h-7 rounded-full shadow-inner transition duration-200 ease-in-out"></div>
                    <div class="toggle-dot absolute w-6 h-6 bg-white rounded-full shadow transform transition duration-300 ease-in-out"></div>
                </label>
            </div>

        <div id="userForm" class="mt-4 {% if not toggleUser is defined and formUser.vars.errors|length == 0 %}hidden{% endif %}">
            <div class="space-y-4">
            {{ form_widget(formUser, {'attr': {'class': 'border-b border-gray-300 py-2'}}) }}
            </div>
        </div>

        <!-- Génération du mot de passe -->
        <div class="mt-4" id="generatePasswordDiv" style="display: none;">
            <button type="button" id="generatePassword" class="w-full bg-green-500 hover:bg-green-600 text-white font-bold py-2 rounded-md transition duration-150 ease-in-out">
                Générer un mot de passe sécurisé
            </button>
        </div>
            
            <!-- Afficher les erreurs du formulaire -->
            <div class="mt-4">
                {% for error in formClient.vars.errors %}
                    <div class="bg-red-100 text-red-600 p-2 rounded mb-2">{{ error.message }}</div>
                {% endfor %}
            </div>
            {% if app.session.flashBag.has('success') %}
                <div class="bg-green-500 text-white p-4 rounded-lg mb-4">
                    {{ app.session.flashBag.get('success')|first }}
                </div>
            {% endif %}
            
            <button type="submit" class="w-full bg-blue-700 hover:bg-blue-800 text-white font-bold py-3 rounded-md transition duration-150 ease-in-out shadow-lg hover:shadow-xl mt-5">
                <i class="fas fa-save"></i> Enregistrer
            </button>
            
            {{ form_end(formClient) }}
        </form>
    </div>
</div>

<script>
document.addEventListener('DOMContentLoaded', function () {
    const toggleUser = document.getElementById('toggleUser');
    const userForm = document.getElementById('userForm');
    const passwordField = document.getElementById('user_password');
    const generatePasswordButton = document.getElementById('generatePassword');
    const generatePasswordDiv = document.getElementById('generatePasswordDiv');

    // Logic for toggling the user form visibility
    if (toggleUser.checked || {{ formUser.vars.errors|length > 0 ? 'true' : 'false' }}) {
        userForm.classList.remove('hidden');
        generatePasswordDiv.style.display = 'block'; // Show the password generation button
    } else {
        generatePasswordDiv.style.display = 'none'; // Hide the password generation button
    }

    toggleUser.addEventListener('change', function() {
        if (this.checked) {
            userForm.classList.remove('hidden');
            generatePasswordDiv.style.display = 'block'; // Show the password generation button
        } else {
            userForm.classList.add('hidden');
            generatePasswordDiv.style.display = 'none'; // Hide the password generation button
        }
    });

    // Fonction pour générer un mot de passe sécurisé
    generatePasswordButton.addEventListener('click', function() {
        const password = generateSecurePassword();
        passwordField.value = password;

        // Optionally, validate the password field after generating the password
        if (passwordField) {
            passwordField.setCustomValidity('');  // Reset custom validation error
        }
    });

    // Fonction pour générer un mot de passe sécurisé
    function generateSecurePassword() {
        const length = 12;
        const charset = "abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!@#$%^&*()_+";
        let password = '';
        for (let i = 0; i < length; i++) {
            const randomIndex = Math.floor(Math.random() * charset.length);
            password += charset[randomIndex];
        }
        return password;
    }
});
</script>

<style>
 /* Style du toggle switch */
.toggle-bg {
    transition: background-color 0.3s ease, box-shadow 0.3s ease;
}
#toggleUser:checked + .toggle-bg {
    background-color: #4CAF50;
    box-shadow: 0 0 10px rgba(76, 175, 80, 0.5);
}
#toggleUser:checked + .toggle-bg + .toggle-dot {
    transform: translateX(100%);
}
.toggle-dot {
    transition: transform 0.3s ease;
}
    /* Ajout d'une animation sur le bouton */
    button {
        position: relative;
        overflow: hidden;
    }
    button:before {
        content: "";
        position: absolute;
        top: 0;
        left: 0;
        width: 100%;
        height: 100%;
        background: rgba(255, 255, 255, 0.2);
        transition: transform 0.4s;
        transform: scaleX(0);
        z-index: 0;
    }
    button:hover:before {
        transform: scaleX(1);
    }
    button span {
        position: relative;
        z-index: 1;
    }
</style>

{% endblock %}
